{"version":3,"sources":["App.tsx","components/HomePage.tsx","utils/constans.tsx","utils/searchHelper.ts","components/SearchLink.tsx","utils/SearchOptions.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","utils/SortType.ts","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","App","className","role","to","HomePage","CENTURIES_NUMBERS","GenderStatus","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SearchOptions","PeopleFilters","query","setSerchParams","centuries","sex","Male","Female","type","placeholder","onChange","event","Query","target","map","century","updatedCenturies","includes","filter","cent","onClick","newCenturies","c","centuryToggle","Centuries","Sex","Loader","SortType","PeopleTable","visiblePeople","isError","isLoading","people","sort","order","getSortParams","selectedPersonSlug","useParams","length","slug","name","born","died","motherName","fatherName","mother","father","href","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","isIncludeQuery","personName","normalizeQuery","toLocaleLowerCase","trim","PeoplePage","useState","setPeople","setIsLoading","setIsError","get","getAll","Sort","Order","useEffect","getPeople","catch","finally","preparedPeople","centuriesToNumber","centurie","person","personCentury","Math","ceil","a","b","Name","localeCompare","Born","Died","getPreparedPeople","find","sortType","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.6df125dc.chunk.js","sourcesContent":["import {\n  NavLink, Outlet,\n} from 'react-router-dom';\n\nimport './App.scss';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink className={getLinkClass} to=\"/\">\n              Home\n            </NavLink>\n\n            <NavLink\n              className={getLinkClass}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const columnsNames = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\n\nexport const CENTURIES_NUMBERS = ['16', '17', '18', '19', '20'];\n\nexport const ONE_HUNDRED_YEARS = 100;\n\nexport const NOT_SET_VALUE = '-';\n\nexport const FEMAL_GENDER = 'f';\nexport const MALE_GENDER = 'm';\n\nexport enum GenderStatus {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SearchOptions {\n  Sex = 'sex',\n  Query = 'query',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CENTURIES_NUMBERS, GenderStatus } from '../utils/constans';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchOptions } from '../utils/SearchOptions';\n\ntype Props = {\n  query: string;\n  setSerchParams: (v: URLSearchParams | string) => void;\n  searchParams: URLSearchParams;\n  centuries: string[];\n  sex: string;\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  query,\n  setSerchParams,\n  searchParams,\n  centuries,\n  sex,\n}) => {\n  function centuryToggle(century: string) {\n    const params = new URLSearchParams(searchParams);\n    const newCenturies = centuries.includes(century)\n      ? centuries.filter(c => c !== century)\n      : [...centuries, century];\n\n    params.delete('centuries');\n    newCenturies.forEach(c => params.append('centuries', c));\n    setSerchParams(params);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSerchParams(\n      getSearchWith(searchParams, {\n        [SearchOptions.Query]: event.target.value || null,\n      }),\n    );\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames(\n            { 'is-active': !sex },\n          )}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames(\n            { 'is-active': sex === GenderStatus.Male },\n          )}\n          params={{ sex: GenderStatus.Male }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames(\n            { 'is-active': sex === GenderStatus.Female },\n          )}\n          params={{ sex: GenderStatus.Female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_NUMBERS.map(century => {\n              const isCenturyIncluded = centuries.includes(century);\n              const updatedCenturies = isCenturyIncluded\n                ? centuries.filter(cent => cent !== century)\n                : [...centuries, century];\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    { 'is-info': centuries.includes(century) },\n                  )}\n                  onClick={() => centuryToggle(century)}\n                  params={{\n                    centuries: updatedCenturies,\n                  }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            [SearchOptions.Centuries]: [],\n            [SearchOptions.Sex]: null,\n            [SearchOptions.Query]: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum SortType {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Loader } from './Loader';\nimport { Person } from '../types';\nimport {\n  FEMAL_GENDER,\n  NOT_SET_VALUE,\n} from '../utils/constans';\nimport { SortType } from '../utils/SortType';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\n\ntype Props = {\n  visiblePeople: Person[];\n  isError: boolean;\n  isLoading: boolean;\n  people: Person[];\n  sort: string;\n  order: string;\n  getSortParams: (sortType: SortType) => SearchParams;\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  visiblePeople,\n  isError,\n  isLoading,\n  people,\n  sort,\n  order,\n  getSortParams,\n}) => {\n  const { selectedPersonSlug } = useParams();\n\n  if (isError) {\n    return (\n      <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n        Something went wrong\n      </p>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Loader />\n    );\n  }\n\n  if (!people.length) {\n    return (\n      <p data-cy=\"noPeopleMessage\">\n        There are no people on the server\n      </p>\n    );\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(SortType).map(([key, value]) => (\n            <th key={key}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {key}\n                <SearchLink params={getSortParams(value)}>\n                  <span className=\"icon\">\n                    <i className={classNames('fas', {\n                      'fa-sort': sort !== value,\n                      'fa-sort-up': sort === value && !order,\n                      'fa-sort-down': sort === value && order,\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visiblePeople.map(({\n          slug,\n          sex,\n          name,\n          born,\n          died,\n          motherName,\n          fatherName,\n          mother,\n          father,\n        }) => (\n          <tr\n            data-cy=\"person\"\n            className={classNames(\n              { 'has-background-warning': selectedPersonSlug === slug },\n            )}\n            key={slug}\n          >\n            <td>\n              <a\n                className={classNames(\n                  { 'has-text-danger': sex === FEMAL_GENDER },\n                )}\n                href={`#/people/${slug}`}\n              >\n                {name}\n              </a>\n            </td>\n\n            <td>{sex}</td>\n            <td>{born}</td>\n            <td>{died}</td>\n\n            <td>\n              {mother ? (\n                <a\n                  className=\"has-text-danger\"\n                  href={`#/people/${mother.slug}`}\n                >\n                  {motherName}\n                </a>\n              ) : (\n                motherName || NOT_SET_VALUE\n              )}\n            </td>\n\n            <td>\n              {father ? (\n                <a\n                  href={`#/people/${father.slug}`}\n                >\n                  {fatherName}\n                </a>\n              ) : (\n                fatherName || NOT_SET_VALUE\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { SearchOptions } from '../utils/SearchOptions';\nimport { SortType } from '../utils/SortType';\nimport { SearchParams } from '../utils/searchHelper';\nimport { ONE_HUNDRED_YEARS } from '../utils/constans';\n\nconst isIncludeQuery = (\n  personName: Person | undefined,\n  normalizeQuery: string,\n) => (\n  personName?.name.toLocaleLowerCase().trim().includes(normalizeQuery)\n);\n\nconst getPreparedPeople = (\n  people: Person[],\n  sex: string,\n  query: string,\n  centuries: string[],\n  sort: string,\n  order: string,\n): Person[] => {\n  let preparedPeople = [...people];\n  const normalizeQuery = query.toLocaleLowerCase().trim();\n  const centuriesToNumber = centuries.map(centurie => +centurie);\n\n  if (centuriesToNumber.length) {\n    preparedPeople = preparedPeople.filter(person => {\n      const personCentury = Math.ceil(person.born / ONE_HUNDRED_YEARS);\n\n      return centuriesToNumber.includes(personCentury) && person;\n    });\n  }\n\n  if (query) {\n    preparedPeople = preparedPeople.filter(person => (\n      person.name.includes(normalizeQuery)\n      || isIncludeQuery(person.mother, normalizeQuery)\n      || isIncludeQuery(person.father, normalizeQuery)\n    ));\n  }\n\n  if (sex) {\n    preparedPeople = preparedPeople.filter(person => person.sex === sex);\n  }\n\n  if (sort) {\n    preparedPeople.sort((a, b) => {\n      switch (sort) {\n        case SortType.Name:\n          return order\n            ? b.name.localeCompare(a.name)\n            : a.name.localeCompare(b.name);\n        case SortType.Sex:\n          return order\n            ? b.sex.localeCompare(a.sex)\n            : a.sex.localeCompare(b.sex);\n        case SortType.Born:\n          return order\n            ? b.born - a.born\n            : a.born - b.born;\n        case SortType.Died:\n          return order\n            ? b.died - a.died\n            : a.died - b.died;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return preparedPeople;\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchParams, setSerchParams] = useSearchParams();\n  const query = searchParams.get(SearchOptions.Query) || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const sort = searchParams.get(SearchOptions.Sort) || '';\n  const order = searchParams.get(SearchOptions.Order) || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => (\n        setIsLoading(false)\n      ));\n  }, []);\n\n  const peopleWithParents = people.map(person => {\n    const mother = people.find(({ name }) => name === person.motherName);\n    const father = people.find(({ name }) => name === person.fatherName);\n\n    return { ...person, mother, father };\n  });\n\n  const getSortParams = (sortType: SortType): SearchParams => {\n    if (sort !== sortType) {\n      return {\n        [SearchOptions.Sort]: sortType,\n        [SearchOptions.Order]: null,\n      };\n    }\n\n    if (sort === sortType && !order) {\n      return { [SearchOptions.Order]: 'desc' };\n    }\n\n    return {\n      [SearchOptions.Sort]: null,\n      [SearchOptions.Order]: null,\n    };\n  };\n\n  const visiblePeople = getPreparedPeople(\n    peopleWithParents,\n    sex,\n    query,\n    centuries,\n    sort,\n    order,\n  );\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {(!isLoading && !isError) && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters\n                query={query}\n                searchParams={searchParams}\n                setSerchParams={setSerchParams}\n                centuries={centuries}\n                sex={sex}\n              />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {query && !visiblePeople.length\n                ? (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                ) : (\n                  <PeopleTable\n                    visiblePeople={visiblePeople}\n                    isError={isError}\n                    isLoading={isLoading}\n                    people={people}\n                    sort={sort}\n                    order={order}\n                    getSortParams={getSortParams}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"people/:selectedPersonSlug?\" element={<PeoplePage />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n        <Route\n          path=\"/home\"\n          element={\n            <Navigate to=\"/\" replace />\n          }\n        />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}